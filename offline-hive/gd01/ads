USE gmall_work_01;

-- 1. 商品全景汇总表（增加计算字段和年累计指标）
CREATE TABLE ads_item_overview_dd (
    date_key INT NOT NULL COMMENT '日期键YYYYMMDD',
    item_id BIGINT NOT NULL COMMENT '商品ID',
    category_id INT NOT NULL COMMENT '叶子类目ID',

    -- 基础指标
    uv BIGINT DEFAULT 0 COMMENT '商品访客数',
    pv BIGINT DEFAULT 0 COMMENT '商品浏览量',
    visited_items BIGINT DEFAULT 0 COMMENT '有访问商品数',
    total_dwell_sec BIGINT DEFAULT 0 COMMENT '总停留时长(秒)',
    bounce_count BIGINT DEFAULT 0 COMMENT '跳出人数',
    micro_uv BIGINT DEFAULT 0 COMMENT '微详情访客数',

    -- 转化指标
    fav_uv BIGINT DEFAULT 0 COMMENT '收藏人数',
    cart_qty BIGINT DEFAULT 0 COMMENT '加购件数',
    cart_uv BIGINT DEFAULT 0 COMMENT '加购人数',
    order_uv BIGINT DEFAULT 0 COMMENT '下单买家数',
    pay_uv BIGINT DEFAULT 0 COMMENT '支付买家数',

    -- 价值指标
    order_qty BIGINT DEFAULT 0 COMMENT '下单件数',
    order_amt DECIMAL(18,2) DEFAULT 0 COMMENT '下单金额',
    pay_qty BIGINT DEFAULT 0 COMMENT '支付件数',
    pay_amt DECIMAL(18,2) DEFAULT 0 COMMENT '支付金额',
    paid_items BIGINT DEFAULT 0 COMMENT '有支付商品数',
    refund_amt DECIMAL(18,2) DEFAULT 0 COMMENT '退款金额',
    jhs_pay_amt DECIMAL(18,2) DEFAULT 0 COMMENT '聚划算支付金额',
    ytd_pay_amt DECIMAL(18,2) DEFAULT 0 COMMENT '年累计支付金额',

    -- 计算字段（存储避免重复计算）
    avg_stay_sec DECIMAL(10,2) DEFAULT 0 COMMENT '平均停留时长(秒)',
    bounce_rate DECIMAL(5,4) DEFAULT 0 COMMENT '跳出率',
    fav_conversion_rate DECIMAL(5,4) DEFAULT 0 COMMENT '收藏转化率',
    cart_conversion_rate DECIMAL(5,4) DEFAULT 0 COMMENT '加购转化率',
    order_conversion_rate DECIMAL(5,4) DEFAULT 0 COMMENT '下单转化率',
    pay_conversion_rate DECIMAL(5,4) DEFAULT 0 COMMENT '支付转化率',
    atv DECIMAL(10,2) DEFAULT 0 COMMENT '客单价',
    visitor_value DECIMAL(10,2) DEFAULT 0 COMMENT '访客平均价值',

    etl_time DATETIME NOT NULL COMMENT 'ETL时间',
    PRIMARY KEY (date_key, item_id),
    KEY idx_category (category_id)
) COMMENT 'ADS-商品全景日汇总表（支撑效率监控看板）';

-- 2. 商品分层聚合表（增加新买家指标）
CREATE TABLE ads_item_interval_dd (
    date_key INT NOT NULL COMMENT '日期键YYYYMMDD',
    category_id INT NOT NULL COMMENT '叶子类目ID',
    price_band VARCHAR(20) COMMENT '价格带区间(如0-50)',
    pay_qty_band VARCHAR(20) COMMENT '支付件数区间(如0-10)',
    pay_amt_band VARCHAR(20) COMMENT '支付金额区间(如0-100)',

    -- 核心指标
    sale_item_count BIGINT DEFAULT 0 COMMENT '动销商品数',
    total_pay_amt DECIMAL(18,2) DEFAULT 0 COMMENT '支付金额',
    total_pay_qty BIGINT DEFAULT 0 COMMENT '支付件数',
    new_buyer_count BIGINT DEFAULT 0 COMMENT '支付新买家数', -- 新增
    new_buyer_amt DECIMAL(18,2) DEFAULT 0 COMMENT '新买家支付金额', -- 新增

    -- 计算字段
    avg_item_price DECIMAL(18,2) DEFAULT 0 COMMENT '件单价',

    etl_time DATETIME NOT NULL COMMENT 'ETL时间',
    PRIMARY KEY (date_key, category_id, price_band, pay_qty_band, pay_amt_band)
) COMMENT 'ADS-商品分层聚合表（支撑区间分析看板）';

-- 3. 新老买家分析表（增加新买家支付金额）
CREATE TABLE ads_item_buyer_type_dd (
      date_key INT NOT NULL COMMENT '日期键YYYYMMDD',
      item_id BIGINT NOT NULL COMMENT '商品ID',

    -- 买家类型指标
      new_buyer_count BIGINT DEFAULT 0 COMMENT '支付新买家数',
      old_buyer_count BIGINT DEFAULT 0 COMMENT '支付老买家数',
      new_buyer_amt DECIMAL(18,2) DEFAULT 0 COMMENT '新买家支付金额', -- 新增
      old_buyer_amt DECIMAL(18,2) DEFAULT 0 COMMENT '老买家支付金额',

      etl_time DATETIME NOT NULL COMMENT 'ETL时间',
      PRIMARY KEY (date_key, item_id)
) COMMENT 'ADS-商品新老买家分析表';




-- 1. 商品全景汇总表ETL（完整版）
INSERT INTO ads_item_overview_dd (
    date_key, item_id, category_id, uv, pv, visited_items,
    total_dwell_sec, bounce_count, micro_uv, fav_uv, cart_qty,
    cart_uv, order_uv, pay_uv, order_qty, order_amt, pay_qty,
    pay_amt, paid_items, refund_amt, jhs_pay_amt, ytd_pay_amt,
    avg_stay_sec, bounce_rate, fav_conversion_rate, cart_conversion_rate,
    order_conversion_rate, pay_conversion_rate, atv, visitor_value,
    etl_time
)
SELECT
    d.date_key,
    d.item_id,
    i.category_id,
    -- 基础指标
    d.visitor_count AS uv,
    d.visit_count AS pv,
    CASE WHEN d.visitor_count > 0 THEN 1 ELSE 0 END AS visited_items,
    d.total_dwell_seconds,
    d.bounce_count,
    d.micro_detail_user_count AS micro_uv,
    -- 转化指标
    d.fav_add_count AS fav_uv,
    d.cart_add_quantity AS cart_qty,
    (SELECT COUNT(DISTINCT user_id)
     FROM dwd_cart_action_di c
     WHERE c.date_key = d.date_key
       AND c.item_id = d.item_id
       AND c.action_type = 'ADD') AS cart_uv,
    d.order_user_count AS order_uv,
    d.payment_user_count AS pay_uv,
    -- 价值指标
    d.order_quantity AS order_qty,
    d.order_amount AS order_amt,
    d.payment_quantity AS pay_qty,
    d.payment_amount AS pay_amt,
    CASE WHEN d.payment_quantity > 0 THEN 1 ELSE 0 END AS paid_items,
    COALESCE(r.refund_amt, 0) AS refund_amt,
    COALESCE(jhs.jhs_pay_amt, 0) AS jhs_pay_amt,
    -- 替换WITH子句：计算当年累计支付金额
    (SELECT SUM(payment_amount)
     FROM dws_item_action_dd y
     WHERE y.item_id = d.item_id
       AND y.date_key BETWEEN (
         SELECT MIN(date_key)
         FROM dim_date
         WHERE year = YEAR(STR_TO_DATE(d.date_key, '%Y%m%d'))  -- 从当前date_key解析年份
     ) AND d.date_key
    ) AS ytd_pay_amt,
    -- 计算字段
    ROUND(d.total_dwell_seconds / NULLIF(d.visitor_count, 0), 2) AS avg_stay_sec,
    ROUND(d.bounce_count / NULLIF(d.visitor_count, 0), 4) AS bounce_rate,
    ROUND(d.fav_add_count / NULLIF(d.visitor_count, 0), 4) AS fav_conversion_rate,
    ROUND((SELECT COUNT(DISTINCT user_id)
           FROM dwd_cart_action_di c
           WHERE c.date_key = d.date_key
             AND c.item_id = d.item_id
             AND c.action_type = 'ADD') / NULLIF(d.visitor_count, 0), 4) AS cart_conversion_rate,
    ROUND(d.order_user_count / NULLIF(d.visitor_count, 0), 4) AS order_conversion_rate,
    ROUND(d.payment_user_count / NULLIF(d.visitor_count, 0), 4) AS pay_conversion_rate,
    ROUND(d.payment_amount / NULLIF(d.payment_user_count, 0), 2) AS atv,
    ROUND(d.payment_amount / NULLIF(d.visitor_count, 0), 2) AS visitor_value,
    NOW()
FROM dws_item_action_dd  d
         JOIN dim_item i ON d.item_id = i.item_id
         JOIN dim_date dd ON d.date_key = dd.date_key
         LEFT JOIN (
    SELECT item_id, date_key, SUM(refund_amount) AS refund_amt
    FROM ods_event_refund
    GROUP BY item_id, date_key
) r ON d.item_id = r.item_id AND d.date_key = r.date_key
         LEFT JOIN (
    SELECT item_id, date_key, SUM(payment_amount) AS jhs_pay_amt
    FROM dwd_payment_di
    WHERE activity_id = 'JUHUASUAN'
    GROUP BY item_id, date_key
) jhs ON d.item_id = jhs.item_id AND d.date_key = jhs.date_key;

-- 2. 商品分层聚合表ETL（含新买家指标）
INSERT INTO ads_item_interval_dd (
    date_key, category_id, price_band, pay_qty_band, pay_amt_band,
    sale_item_count, total_pay_amt, total_pay_qty,
    new_buyer_count, new_buyer_amt,
    avg_item_price,
    etl_time
)
SELECT
    date_key,
    category_id,
    price_band,
    pay_qty_band,
    pay_amt_band,
    COUNT(DISTINCT item_id) AS sale_item_count,
    SUM(pay_amt) AS total_pay_amt,
    SUM(pay_qty) AS total_pay_qty,
    SUM(new_buyer_count) AS new_buyer_count,
    SUM(new_buyer_amt) AS new_buyer_amt,
    SUM(pay_amt)/NULLIF(SUM(pay_qty),0) AS avg_item_price,
    NOW()
FROM (
         -- 子查询中修正字段名：payment_quantity → pay_qty，payment_amount → pay_amt
         SELECT
             d.date_key,
             i.category_id,
             i.item_id,
             i.price,
             d.pay_qty AS pay_qty,  -- 修正：使用 ads_item_overview_dd 的 pay_qty
             d.pay_amt AS pay_amt,  -- 修正：使用 ads_item_overview_dd 的 pay_amt
             b.new_buyer_count,
             b.new_buyer_amt,
             -- 价格带分档
             CASE
                 WHEN i.price <= 50 THEN '0-50'
                 WHEN i.price <= 100 THEN '51-100'
                 WHEN i.price <= 200 THEN '101-200'
                 ELSE '201+'
                 END AS price_band,
             -- 支付件数分档（使用修正后的 pay_qty）
             CASE
                 WHEN d.pay_qty <= 10 THEN '0-10'  -- 修正：d.pay_qty
                 WHEN d.pay_qty <= 50 THEN '11-50'  -- 修正：d.pay_qty
                 ELSE '51+'
                 END AS pay_qty_band,
             -- 支付金额分档（使用修正后的 pay_amt）
             CASE
                 WHEN d.pay_amt <= 100 THEN '0-100'  -- 修正：d.pay_amt
                 WHEN d.pay_amt <= 500 THEN '101-500'  -- 修正：d.pay_amt
                 ELSE '501+'
                 END AS pay_amt_band
         FROM ads_item_overview_dd d
                  JOIN dim_item i ON d.item_id = i.item_id
                  LEFT JOIN ads_item_buyer_type_dd b
                            ON d.date_key = b.date_key AND d.item_id = b.item_id
         WHERE d.pay_qty > 0  -- 修正：使用 pay_qty 过滤动销商品
     ) AS item_stats
GROUP BY date_key, category_id, price_band, pay_qty_band, pay_amt_band;
-- 3. 新老买家分析表ETL（增加新买家支付金额）
INSERT INTO ads_item_buyer_type_dd (
    date_key, item_id, new_buyer_count, old_buyer_count,
    new_buyer_amt, old_buyer_amt, etl_time
)
SELECT
    p.date_key,
    p.item_id,
    -- 新买家：365天内首次支付（最后支付日期为空或在365天前）
    SUM(IF(
            u.last_payment_date IS NULL
                OR u.last_payment_date < DATE_SUB(STR_TO_DATE(p.date_key, '%Y%m%d'), INTERVAL 365 DAY),
            1, 0
        )) AS new_buyer_count,
    -- 老买家：365天内有支付记录
    SUM(IF(
            u.last_payment_date IS NOT NULL
                AND u.last_payment_date >= DATE_SUB(STR_TO_DATE(p.date_key, '%Y%m%d'), INTERVAL 365 DAY),
            1, 0
        )) AS old_buyer_count,
    -- 新买家支付金额
    SUM(IF(
            u.last_payment_date IS NULL
                OR u.last_payment_date < DATE_SUB(STR_TO_DATE(p.date_key, '%Y%m%d'), INTERVAL 365 DAY),
            p.payment_amount, 0
        )) AS new_buyer_amt,
    -- 老买家支付金额
    SUM(IF(
            u.last_payment_date IS NOT NULL
                AND u.last_payment_date >= DATE_SUB(STR_TO_DATE(p.date_key, '%Y%m%d'), INTERVAL 365 DAY),
            p.payment_amount, 0
        )) AS old_buyer_amt,
    NOW()
FROM dwd_payment_di p
         JOIN dim_user u ON p.user_id = u.user_id
GROUP BY p.date_key, p.item_id;